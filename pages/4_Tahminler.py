import streamlit as stimport pandas as pdimport numpy as npfrom datetime import datetime, timedeltaimport plotly.graph_objects as gofrom plotly.subplots import make_subplotsfrom sklearn.linear_model import LinearRegressionfrom sklearn.metrics import r2_score, mean_squared_errorfrom utils.data_loader import calculate_metricsfrom utils.predictions import create_sales_prediction, create_expense_predictiondef show_predictions():    st.title("📈 Tahminler")    if 'data' not in st.session_state or st.session_state.data is None:        st.info("👆 Lütfen sol menüden bir veri dosyası yükleyin.")        return    data = st.session_state.data    metrics = calculate_metrics(data)    if metrics:        # Tahmin parametreleri        st.sidebar.markdown("### 🎯 Tahmin Parametreleri")        prediction_type = st.sidebar.selectbox(            "Tahmin Türü",            ["Satış Tahmini", "Gider Tahmini", "Kar Tahmini"]        )        periods = st.sidebar.slider(            "Tahmin Dönemi (Ay)",            min_value=1,            max_value=6,            value=3        )        confidence = st.sidebar.slider(            "Güven Aralığı (%)",            min_value=80,            max_value=99,            value=95        )        if prediction_type == "Satış Tahmini":            show_sales_prediction(metrics, periods, confidence)        elif prediction_type == "Gider Tahmini":            show_expense_prediction(metrics, periods, confidence)        else:            show_profit_prediction(metrics, periods, confidence)def show_sales_prediction(metrics, periods, confidence):    """Satış tahmini göster"""    predictions, pred_metrics = create_sales_prediction(metrics, periods)    if predictions is not None and pred_metrics is not None:        st.subheader("📊 Satış Tahmini")        # Tahmin grafiği        months = ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs',                  'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim']        future_months = ['Kasım', 'Aralık', 'Ocak'][:periods]        fig = go.Figure()        # Geçmiş veriler        fig.add_trace(go.Scatter(            x=months,            y=metrics['monthly_sales'],            name='Gerçekleşen',            mode='lines+markers',            line=dict(color='#2E86C1', width=2)        ))        # Tahminler        fig.add_trace(go.Scatter(            x=future_months,            y=predictions,            name='Tahmin',            mode='lines+markers',            line=dict(color='#E74C3C', width=2, dash='dash')        ))        # Güven aralığı        conf_factor = 1.96 if confidence == 95 else 2.57  # 95% veya 99% güven aralığı        upper_bound = predictions + pred_metrics['rmse'] * conf_factor        lower_bound = predictions - pred_metrics['rmse'] * conf_factor        fig.add_trace(go.Scatter(            x=future_months + future_months[::-1],            y=list(upper_bound) + list(lower_bound)[::-1],            fill='toself',            fillcolor='rgba(231, 76, 60, 0.2)',            line=dict(color='rgba(231, 76, 60, 0)'),            name=f'%{confidence} Güven Aralığı'        ))        fig.update_layout(            title="Satış Tahmin Grafiği",            xaxis_title="Ay",            yaxis_title="Satış (TL)",            height=500        )        st.plotly_chart(fig, use_container_width=True)        # Tahmin metrikleri        col1, col2, col3 = st.columns(3)        with col1:            st.metric(                "Model Doğruluğu",                f"%{pred_metrics['r2'] * 100:.1f}",                "R² Skoru"            )        with col2:            trend = "Yükseliş" if pred_metrics['slope'] > 0 else "Düşüş"            st.metric(                "Trend Yönü",                trend,                f"{abs(pred_metrics['slope']):,.0f} TL/Ay"            )        with col3:            st.metric(                "Tahmin Hatası",                f"₺{pred_metrics['rmse']:,.0f}",                "RMSE"            )        # Tahmin detayları        st.markdown("#### 📋 Tahmin Detayları")        predictions_df = pd.DataFrame({            'Ay': future_months,            'Tahmini Satış': [f"₺{p:,.0f}" for p in predictions],            'Alt Sınır': [f"₺{p:,.0f}" for p in lower_bound],            'Üst Sınır': [f"₺{p:,.0f}" for p in upper_bound]        })        st.dataframe(            predictions_df,            hide_index=True,            use_container_width=True        )def show_expense_prediction(metrics, periods, confidence):    """Gider tahmini göster"""    predictions, pred_metrics = create_expense_prediction(metrics, periods)    # Benzer şekilde gider tahmin grafiği ve metrikleri göster...def show_profit_prediction(metrics, periods, confidence):    """Kar tahmini göster"""    # Satış ve gider tahminlerini kullanarak kar tahmini yap...if __name__ == "__main__":    show_predictions()