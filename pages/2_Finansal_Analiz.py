import streamlit as stimport pandas as pdimport plotly.graph_objects as gofrom plotly.subplots import make_subplotsfrom utils.data_loader import calculate_metrics, get_expense_breakdownfrom utils.charts import create_trend_analysis, create_expense_breakdownfrom utils.helpers import format_currency, calculate_growthfrom utils.charts import create_trend_analysis, create_expense_breakdowndef show_financial_analysis():    st.title("ðŸ“Š Finansal Analiz")    if 'data' not in st.session_state or st.session_state.data is None:        st.info("ðŸ‘† LÃ¼tfen sol menÃ¼den bir veri dosyasÄ± yÃ¼kleyin.")        return    data = st.session_state.data    metrics = calculate_metrics(data)    if metrics:        # Analiz tÃ¼rÃ¼ seÃ§imi        analysis_type = st.selectbox(            "ðŸ“ˆ Analiz TÃ¼rÃ¼",            ["SatÄ±ÅŸ Analizi", "Gider Analizi", "KarlÄ±lÄ±k Analizi"]        )        if analysis_type == "SatÄ±ÅŸ Analizi":            show_sales_analysis(metrics)        elif analysis_type == "Gider Analizi":            show_expense_analysis(data)        else:            show_profitability_analysis(metrics)def show_sales_analysis(metrics):    st.subheader("ðŸ“ˆ SatÄ±ÅŸ Analizi")    # AylÄ±k satÄ±ÅŸ trendi    fig = make_subplots(specs=[[{"secondary_y": True}]])    months = ['Ocak', 'Åžubat', 'Mart', 'Nisan', 'MayÄ±s',              'Haziran', 'Temmuz', 'AÄŸustos', 'EylÃ¼l', 'Ekim'][:len(metrics['monthly_sales'])]    # SatÄ±ÅŸ deÄŸerleri    fig.add_trace(        go.Bar(            x=months,            y=metrics['monthly_sales'],            name="SatÄ±ÅŸ",            marker_color='#2ECC71'        ),        secondary_y=False    )    # BÃ¼yÃ¼me oranlarÄ±    growth_rates = [0] + [calculate_growth(curr, prev)                          for curr, prev in zip(metrics['monthly_sales'][1:], metrics['monthly_sales'][:-1])]    fig.add_trace(        go.Scatter(            x=months,            y=growth_rates,            name="BÃ¼yÃ¼me (%)",            line=dict(color='#E74C3C', width=2),            mode='lines+markers'        ),        secondary_y=True    )    fig.update_layout(        title="AylÄ±k SatÄ±ÅŸ ve BÃ¼yÃ¼me Trendi",        height=500    )    st.plotly_chart(fig, use_container_width=True)    # SatÄ±ÅŸ Ã¶zeti    col1, col2, col3 = st.columns(3)    with col1:        st.metric(            "Ortalama AylÄ±k SatÄ±ÅŸ",            format_currency(sum(metrics['monthly_sales']) / len(metrics['monthly_sales'])),            f"{growth_rates[-1]:+.1f}% (Son Ay)"        )    with col2:        st.metric(            "En YÃ¼ksek SatÄ±ÅŸ",            format_currency(max(metrics['monthly_sales'])),            f"Ay: {months[metrics['monthly_sales'].index(max(metrics['monthly_sales']))]}"        )    with col3:        st.metric(            "SatÄ±ÅŸ BÃ¼yÃ¼me Trendi",            "Pozitif" if sum(growth_rates) > 0 else "Negatif",            f"Ort. %{sum(growth_rates[1:]) / len(growth_rates[1:]):.1f}"        )def show_expense_analysis(data):    st.subheader("ðŸ’° Gider Analizi")    expense_data = get_expense_breakdown(data)    if expense_data is not None:        # Gider daÄŸÄ±lÄ±mÄ± pasta grafik        fig = go.Figure(data=[go.Pie(            labels=expense_data['ESAS GÄ°DER YERÄ°'].head(10),            values=expense_data['Genel Toplam'].head(10),            hole=.3        )])        fig.update_layout(            title="En YÃ¼ksek 10 Gider Kalemi",            height=500        )        st.plotly_chart(fig, use_container_width=True)        # Gider detaylarÄ± tablosu        st.markdown("#### ðŸ“‹ Gider DetaylarÄ±")        st.dataframe(            expense_data,            column_config={                'ESAS GÄ°DER YERÄ°': 'Gider Kalemi',                'Genel Toplam': st.column_config.NumberColumn(                    'Toplam',                    format="â‚º%d"                ),                'ORTALAMA': st.column_config.NumberColumn(                    'AylÄ±k Ortalama',                    format="â‚º%d"                ),                'SatÄ±ÅŸ OranÄ±': st.column_config.ProgressColumn(                    'SatÄ±ÅŸ OranÄ± (%)',                    format="%{value:.1f}%",                    min_value=0,                    max_value=100,                )            },            hide_index=True,            use_container_width=True        )def show_profitability_analysis(metrics):    st.subheader("ðŸ“Š KarlÄ±lÄ±k Analizi")    # Kar marjÄ± trendi    fig = go.Figure()    months = ['Ocak', 'Åžubat', 'Mart', 'Nisan', 'MayÄ±s',              'Haziran', 'Temmuz', 'AÄŸustos', 'EylÃ¼l', 'Ekim'][:len(metrics['monthly_margins'])]    fig.add_trace(go.Scatter(        x=months,        y=metrics['monthly_margins'],        mode='lines+markers',        name='Kar MarjÄ± (%)',        line=dict(color='#2E86C1', width=3)    ))    # Hedef Ã§izgisi    fig.add_hline(y=15, line_dash="dash", line_color="red",                  annotation_text="Hedef Marj (%15)")    fig.update_layout(        title="Kar MarjÄ± Trendi",        height=500,        yaxis_title="Kar MarjÄ± (%)"    )    st.plotly_chart(fig, use_container_width=True)    # KarlÄ±lÄ±k metrikleri    col1, col2, col3 = st.columns(3)    with col1:        st.metric(            "Ortalama Kar MarjÄ±",            f"%{sum(metrics['monthly_margins']) / len(metrics['monthly_margins']):.1f}",            f"{metrics['monthly_margins'][-1] - metrics['monthly_margins'][-2]:+.1f}% (Son Ay)"        )    with col2:        profitable_months = sum(1 for m in metrics['monthly_margins'] if m > 15)        st.metric(            "Hedef ÃœstÃ¼ Aylar",            f"{profitable_months}/{len(metrics['monthly_margins'])}",            f"Hedef: %15"        )    with col3:        st.metric(            "Trend",            "YÃ¼kseliÅŸ" if metrics['monthly_margins'][-1] > metrics['monthly_margins'][-2] else "DÃ¼ÅŸÃ¼ÅŸ",            f"{metrics['monthly_margins'][-1] - metrics['monthly_margins'][-2]:+.1f}%"        )if __name__ == "__main__":    show_financial_analysis()