import streamlit as stimport pandas as pdimport plotly.graph_objects as gofrom plotly.subplots import make_subplotsimport yfinance as yffrom datetime import datetime, timedeltaimport numpy as npdef get_market_data():    """Örnek piyasa verilerini getir"""    return {        'USD/TRY': {'value': 28.95, 'change': 0.2},        'EUR/TRY': {'value': 31.45, 'change': -0.1},        'GBP/TRY': {'value': 36.75, 'change': 0.3},        'BIST 100': {'value': 7850.25, 'change': 1.25},        'Altın/TRY': {'value': 1750.50, 'change': 0.5}    }def create_currency_chart(currency_data, period='1M'):    """Döviz grafiği oluştur"""    try:        dates = pd.date_range(end=datetime.now(), periods=30, freq='D')        base_value = currency_data['value']        # Simüle edilmiş fiyat hareketi        np.random.seed(42)        changes = np.random.normal(0, 0.002, len(dates))        prices = [base_value]        for change in changes[::-1]:            prices.append(prices[-1] * (1 + change))        prices = prices[::-1][:-1]        fig = go.Figure(data=[go.Candlestick(            x=dates,            open=[p * 0.998 for p in prices],            high=[p * 1.002 for p in prices],            low=[p * 0.997 for p in prices],            close=prices        )])        fig.update_layout(            title=f"Son {period} Fiyat Hareketi",            yaxis_title="Fiyat",            xaxis_title="Tarih",            height=400,            xaxis_rangeslider_visible=False        )        return fig    except Exception as e:        st.error(f"Grafik oluşturma hatası: {str(e)}")        return Nonedef show_market_data():    st.title("💰 Piyasa Verileri")    # Piyasa verileri    market_data = get_market_data()    # Metrikler    cols = st.columns(len(market_data))    for i, (asset, data) in enumerate(market_data.items()):        with cols[i]:            st.metric(                asset,                f"₺{data['value']:.3f}" if 'TRY' in asset else f"{data['value']:.2f}",                f"{data['change']:+.2f}%"            )    # Detaylı analiz    st.markdown("#### 📊 Detaylı Piyasa Analizi")    col1, col2 = st.columns(2)    with col1:        selected_asset = st.selectbox(            "Varlık",            list(market_data.keys())        )        period = st.radio(            "Periyot",            ["1G", "1H", "1A", "3A", "6A", "1Y"],            horizontal=True        )        chart = create_currency_chart(market_data[selected_asset], period)        if chart:            st.plotly_chart(chart, use_container_width=True)    with col2:        st.markdown("##### 📈 Teknik Göstergeler")        # RSI ve diğer teknik göstergeler (örnek veriler)        indicators = {            'RSI (14)': 58.5,            'MACD': 'Al',            'Bollinger': 'Üst Bant',            'Momentum': 'Pozitif',            'Trend': 'Yükseliş',            'Volatilite': 'Düşük'        }        for indicator, value in indicators.items():            st.metric(indicator, value)    # Piyasa özeti    st.markdown("---")    st.subheader("📰 Piyasa Özeti")    col1, col2 = st.columns(2)    with col1:        st.markdown("#### 🔥 Öne Çıkanlar")        highlights = [            "💹 USD/TRY: Günün en yüksek seviyesini gördü",            "📈 BIST 100: Teknoloji hisseleri öncülüğünde yükselişte",            "🏆 Altın: Güvenli liman talebi devam ediyor",            "⚡ Petrol: OPEC kararları fiyatları destekliyor",            "🌍 Global Piyasalar: Risk iştahı artıyor"        ]        for highlight in highlights:            st.markdown(f"- {highlight}")    with col2:        st.markdown("#### ⚠️ Takip Edilmesi Gerekenler")        watchlist = [            "📊 TCMB Faiz Kararı (14:00)",            "📈 ABD Enflasyon Verileri (16:30)",            "💼 FED Başkanı Konuşması (18:00)",            "🏢 Önemli Şirket Bilançoları",            "🌐 Jeopolitik Gelişmeler"        ]        for item in watchlist:            st.markdown(f"- {item}")    # Veri kaynağı bilgisi    st.markdown("---")    st.caption(f"Veriler en son {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} tarihinde güncellenmiştir.")    st.caption("Not: Veriler demo amaçlı olup, gerçek zamanlı değildir.")if __name__ == "__main__":    show_market_data()